rule "Rule-V1: Common Data update"
salience 1001
dialect "java"
    when
        tunnel : Tunnel()
        tunnelDto : TunnelDto()
        not RuleApplied(ruleNo=="Rule-V1")
    then
        tunnel.setTrafficIpType(Type.valueOf(tunnelDto.getTrafficIpType()));
        tunnel.setConnectionType(ConnectionType.valueOf(tunnelDto.getConnectionType()));
        tunnel.setTunnelType(TunnelType.valueOf(tunnelDto.getTunnelType()));
        tunnel.setTransportType(TransportType.valueOf(tunnelDto.getTransportType()));
        tunnelDto.setIpV4(tunnel.getTrafficIpType().equals(IpAddress.Type.IPV4) ? true : false);
        tunnelDto.setIpV6(tunnel.getTrafficIpType().equals(IpAddress.Type.IPV6) ? true : false);
        tunnelDto.setSingleTunnel( tunnel.getTunnelType() != null && tunnel.getTunnelType().getName().equals(CommonConstant.SINGLE_L2L));
        tunnelDto.setDualTunnel(tunnel.getTunnelType() != null && tunnel.getTunnelType().getName().equals(CommonConstant.DUAL_L2L));
        tunnelDto.setTunnelSubnet(tunnelDto.getTunneInterfaceDto() != null ? StringUtils.trim(tunnelDto.getTunneInterfaceDto().getTunnelSubnet()) : null);
        tunnelDto.setConnectionPIP(tunnel.getConnectionType() != null && tunnel.getConnectionType().getName().equals(CommonConstant.PIP));
        tunnel.setSubnetCidr(tunnelDto.getTunnelSubnet());
        tunnelDto.setDualStackSubnetCidr(tunnelDto.getDualStackTunneInterfaceDto()!=null ? StringUtils.trim(tunnelDto.getDualStackTunneInterfaceDto()).getDualStackSubnet() : "");  
        update(tunnelDto);
        update(tunnel);
        insert(new RuleApplied("Rule-V1"));
    end
	
	rule "Rule-V2: Validate Subnet Text"
	salience 1001
	dialect "java"
    when
        tunnelDto : TunnelDto((tunnelSubnet == null || tunnelSubnet.equals("")) && connectionPIP)
        not RuleApplied(ruleNo=="Rule-V2")
    then
   		tunnelDto.setSubnetValidationPart1(true);
   		update(tunnelDto);
    end
    
    rule "Rule-V2: Perform IPV4 Validation"
	salience 1001
	dialect "java"
    when
        tunnelDto : TunnelDto(subnetValidationPart1 == false && (tunnelSubnet == null || tunnelSubnet.equals("") || tunnelSubnet.equals("   .   .   .   /  ")
	                    || tunnelSubnet.equals(CommonConstant.IP_0000_0) && singleTunnel))
        not RuleApplied(ruleNo=="Rule-V2")
    then
   		tunnelDto.setSubnetValidationPart1(true);
   		update(tunnelDto);
    end

	rule "Rule-V2: Validate Subnet Format"
	salience 1001
	dialect "java"
    when
   		tunnel : Tunnel()
        tunnelDto : TunnelDto(subnetValidationPart1 == false && tunnelSubnet != null)
        not RuleApplied(ruleNo=="Rule-V2")
    then
   	 try {
    	  IpSubnet subnet = new IpSubnet(tunnelDto.getTunnelSubnet());
	      tunnel.setSubnet(subnet);
	      update(tunnel);
	      tunnelDto.setSubnetValidFormat(true);
	      } catch (IllegalArgumentException iae) {
	      	tunnelDto.setSubnetValidFormat(false);
	      	tunnelDto.setSubnetValidationPart1(false);
	      	//tunnelDto.setErrorSummary("Subnet is Invalid: Msg:"+ iae.getLocalizedMessage()+",feild: tunnelSubnet ");
	        tunnelDto.setErrorMssg("Subnet is Invalid: Msg:"+ iae.getLocalizedMessage()+",feild: tunnelSubnet ");           
	      }
		update(tunnelDto);
		insert(new RuleApplied("Rule-V2"));
    end
    
    rule "Rule-V2: Validate Subnet from Allowed List"
	salience 1001
	dialect "java"
    when
        tunnelDto : TunnelDto(subnetValidFormat == true && tunnelSubnet != null)
        $subnetValidationIp4Service : SubnetValidationIp4Service()
        eval($subnetValidationIp4Service.isAllowedSubnet(tunnelDto.getTunnelSubnet()) == false)
    then
    	tunnelDto.setSubnetValidationPart1(false);
   		tunnelDto.setErrorMssg("Subnet is Invalid: Msg: Subnet does not match required subnet boundaries.,feild: tunnelSubnet ");           
    end
    
    rule "Rule-V2: Perform Dual Stack Validation"
	salience 1001
	dialect "java"
    when
    	tunnel : Tunnel(transportType != null &&  (transportType.equals(Tunnel.TransportType.DUAL_STACK_IPV6_OVER_IPV4) 
	                        || transportType.equals(Tunnel.TransportType.DUAL_STACK_IPV4_OVER_IPV6)
	                        || transportType.equals(Tunnel.TransportType.DUAL_STACK)) && ipV6==true) 
        tunnelDto : TunnelDto(subnetValidFormat == true && tunnelSubnet != null)
        $subnetValidationIp4Service : SubnetValidationIp4Service()
        eval($subnetValidationIp4Service.isAllowedSubnet(tunnelDto.getTunnelSubnet()) == true)
    then
    	tunnelDto.setSubnetValidationPart2(true);
   		tunnelDto.setErrorMssg("Subnet is Invalid: Msg: Subnet does not match required subnet boundaries.,feild: tunnelSubnet ");           
    end
    
    rule "Rule-V2: Invalid Tunnel Due to subnet validation part-1 failed, no need to check part-2"
	salience 1001
	dialect "java"
    when
    	tunnel : Tunnel() 
    	orkOrder : WorkOrder()
        tunnelDto : TunnelDto(!subnetValidationPart1)
    then
    	throw new VhapServiceException(ErrorResponse.builder().details(tunnelDto.getErrorMsg()).status_code(500).build());
          
    end
    
      rule "Rule-V2: Valid Tunnel as subnet validation part-1 pass although part-2 failed"
	salience 1001
	dialect "java"
    when
    	tunnel : Tunnel() 
    	orkOrder : WorkOrder()
        tunnelDto : TunnelDto(subnetValidationPart1 && !subnetValidationPart2)
    then
    	SOP("Rule-V2: Valid Tunnel as subnet validation part-1 pass although part-2 failed");
    end
    
    rule "Rule-V2: Validate Tunnel as subnet validation part-1 pass and part-2 pass"
	salience 1001
	dialect "java"
    when
    	tunnel : Tunnel(tunnelType != null && !singleTunnel && tunnel.getTrafficIpType().equals(IpAddress.Type.IPV4)) 
    	$wo : WorkOrder()
        tunnelDto : TunnelDto(subnetValidationPart1 && subnetValidationPart2 && ((!connectionPIP && !ipV6) || $wo.isIsd()) && (tunnelSubnetCidr == null || !IpSubnet.validateCidr(tunnelSubnetCidr)))
    then
    	tunnelDto.setErrorMssg("Msg:Tunnel subnet invalid or incomplete ,feild: dualStackSubnet");  
    end
	
	rule "Rule-V2: Validate Tunnel as subnet validation part-1 pass and part-2 pass"
	salience 1001
	dialect "java"
    when
    	tunnel : Tunnel(tunnelType != null && !singleTunnel && tunnel.getTrafficIpType().equals(IpAddress.Type.IPV6) && (tunnel.getTransportType().equals(TransportType.DUAL_STACK_IPV4_OVER_IPV6))) 
    	$wo : WorkOrder()
        tunnelDto : TunnelDto(subnetValidationPart1 && subnetValidationPart2 && ((!connectionPIP && !ipV6) || $wo.isIsd()) && (dualStackSubnetCidr == null
	                        || !IpSubnet.validateCidr(dualStackSubnetCidr)))
    then
    	tunnelDto.setErrorMssg("Msg:Tunnel Dual Stack Subnet invalid or incomplete ,"+" feild: dualStackSubnet .");  
    end
	
